#+TITLE: Server Documentation
#+AUTHOR: Petros Papapanagiotou
#+EMAIL: petros@workflowfm.com
#+OPTIONS: toc:nil email:t 
#+EXCLUDE_TAGS: noexport
#+PROPERTY: header-args :results output drawer :session workflowfm :exports both :eval no-export :dir ../../
#+HUGO_AUTO_SET_LASTMOD: t

#+HUGO_BASE_DIR: ../
#+HUGO_SECTION: server
#+HUGO_TYPE: docs
#+HUGO_PAIRED_SHORTCODES: tip 
* Server
  :PROPERTIES:
  :EXPORT_FILE_NAME: _index
  :EXPORT_HUGO_MENU: :menu "main" :weight 100
  :END:

Welcome to the *WorkflowFM Composer Server documentation*. 

The Server provides an intermediate layer between the [[http://docs.workflowfm.com/workflowfm-reasoner/][WorkflowFM Reasoner]] and the Client. It exposes a raw socket to allow the client to communicate remotely with the reasoner.

#+ATTR_SHORTCODE: warning
#+BEGIN_tip
The server is currently insecure for public use. Avoid deploying it in a public server or outside a firewall.
#+END_tip

The reasoner is based on [[https://github.com/jrh13/hol-light][HOL Light]], which runs on the OCaml toplevel. This makes it difficult to manage in a scalable way and to connect to it remotely or through the web. It also limits its usage to a single user. The server addresses these issues by managing connections through a raw socket and queueing requests to the reasoner.

The server can be deployed either manually or through Docker. Using the [[https://github.com/workflowfm/workflowfm-composer/pkgs/container/composer-server][existing Docker image]] makes things much easier, but this documentation covers a few different ways to build and deploy it.

Once the server is deployed, you can run an connect multiple [[../client][clients]] to it.

#+hugo: {{< button "./docker/image/" "Get started" >}}

* Docker
:PROPERTIES:
:EXPORT_HUGO_SECTION*: docker
:END:

** Docker
   :PROPERTIES:
   :EXPORT_FILE_NAME: _index
   :EXPORT_HUGO_WEIGHT: 101
   :END:

   Docker helps automate the deployment of the server and the complexity of the reasoner in particular.

   You can use the published image or build it yourself.

** Quick Setup
   :PROPERTIES:
   :EXPORT_FILE_NAME: image
   :EXPORT_HUGO_WEIGHT: 110
   :END:

   The easiest setup is to use the latest available [[https://github.com/workflowfm/workflowfm-composer/pkgs/container/composer-server][Docker image]].

   Pull the image using:
   #+BEGIN_SRC sh
     docker pull ghcr.io/workflowfm/composer-server:latest
   #+END_SRC
   
   Then run a container using:
   #+BEGIN_SRC sh
     docker run -p 7000:7000 --name workflowfm-server --detach ghcr.io/workflowfm/composer-server:latest
   #+END_SRC
   
   - The name ~workflowfm-server~ is optional and can be changed to whatever you want your server container to be named.
   - The port can also be bound to a different system port, e.g. using ~-p 9000:7000~ to bind it to port ~9000~.

   #+begin_tip
   The container may take a few minutes to fully start!
   #+end_tip
 
   This is because it loads [[https://github.com/workflowfm/hol-light][HOL Light]] and the [[https://github.com/workflowfm/workflowfm-reasoner][WorkflowFM Reasoner]] from scratch. You can follow progress using:

   #+BEGIN_SRC sh
     docker logs --follow workflowfm-server
   #+END_SRC


** Build Image
   :PROPERTIES:
   :EXPORT_FILE_NAME: build
   :EXPORT_HUGO_WEIGHT: 120
   :END:

   You can build the Docker image yourself from source.

   First, clone the repository:

   #+BEGIN_SRC sh
     git clone https://github.com/workflowfm/workflowfm-composer.git
   #+END_SRC

   Make sure to /recursively/ populate submodules:
   #+BEGIN_SRC sh
     cd workflowfm-composer/
     git submodule update --init --recursive --depth 1
   #+END_SRC

   Then build the image with the provided ~Dockerfile~:
   #+BEGIN_SRC sh
     docker build -t composer-server .
   #+END_SRC
   
   Then run a container using:
   #+BEGIN_SRC sh
     docker run -p 7000:7000 --name workflowfm-server --detach composer-server
   #+END_SRC
   
   - The name ~workflowfm-server~ is optional and can be changed to whatever you want your server container to be named.
   - The port can also be bound to a different system port, e.g. using ~-p 9000:7000~ to bind it to port ~9000~.

   #+BEGIN_tip
   The container may take a few minutes to fully start!
   #+END_tip
 
   This is because it loads [[https://github.com/workflowfm/hol-light][HOL Light]] and the [[https://github.com/workflowfm/workflowfm-reasoner][WorkflowFM Reasoner]] from scratch. You can follow progress using:

   #+BEGIN_SRC sh
     docker logs --follow workflowfm-server
   #+END_SRC

* Manual
:PROPERTIES:
:EXPORT_HUGO_SECTION*: manual
:END:

** Manual Build
   :PROPERTIES:
   :EXPORT_FILE_NAME: _index
   :EXPORT_HUGO_WEIGHT: 201
   :END:

   A manual build is also possible, albeit more tedious.

   It requires a local installation of the [[https://github.com/workflowfm/workflowfm-reasoner][WorkflowFM Reasoner]], in addition to building and running the server itself.

** Server
   :PROPERTIES:
   :EXPORT_FILE_NAME: server
   :EXPORT_HUGO_WEIGHT: 210
   :END:

   The server can be built using [[https://gradle.org/][Gradle]], which ships with the repository.

   You can use either:
   - Pre-installed Gradle: ~gradle~
   - Linux: ~./gradlew~
   - Windows: ~gradlew.bat~

   #+BEGIN_tip 
   Building requires *JDK 11* or above.
   #+END_tip
   
   The server can be compiled and packaged with a single command:
   #+BEGIN_SRC sh
     gradle :server:distZip
   #+END_SRC

   This will create the file ~server/build/distributions/WorkflowFM_Server-{VERSION}.zip~. 

   Unzip it to your favourite location to obtained a server installation.

** Reasoner
   :PROPERTIES:
   :EXPORT_FILE_NAME: reasoner
   :EXPORT_HUGO_WEIGHT: 220
   :END:
*** Installation

    The [[https://github.com/workflowfm/workflowfm-reasoner][WorkflowFM Reasoner]] can be installed following the [[http://docs.workflowfm.com/workflowfm-reasoner/docs/install/][instructions in its documentation]].

    The involved ~hol-light~ repository can already be found as a submodule under ~server/hol-light~.

    Using [[http://docs.workflowfm.com/workflowfm-reasoner/docs/install/hol-light/#checkpointing][checkpointing]], if possible, can help build a server that runs /instantly/.

*** Launch script
    :PROPERTIES:
    :CUSTOM_ID: script
    :END:

    Once the reasoner is installed and working, we need to build a script that runs the reasoner and pipes the input/output to the server.

    The ~scripts/~ directory contains bash scripts that can help achieve this. Both scripts assume that the reasoner is installed in a ~hol-light/~ directory within the server installation. If that is not the case, this can be adjusted using a symbolic link:

    #+BEGIN_SRC sh
      ln -s full/path/to/reasoner hol-light
    #+END_SRC

    - If checkpointing (dmtcp) was used, the reasoner can run using ~./scripts/launch_prover_local.sh~.
    - If checkpointing is *not* available, you can use ~./scripts/launch_prover_docker.sh~ which is what the Docker build uses to load HOL Light and the reasoner from scratch.
    - You can also run the reasoner on a remote machine using an ssh tunnel. This assumes an installation of the server /and/ the reasoner on that machine, the use of checkpointing, and password-less ssh access to the remote machine. In that case you can use ~./scrips/setup_remote_prover.sh~ to create a remote launch script (~./scripts/launch_prover.sh~), using the url of the remote machine and the absolute path to the installation of the reasoner:
      #+BEGIN_SRC sh
        ./scripts/setup_remote_prover.sh someuser@host.of.reasoner.com /home/someuser/workflowfm-server/scripts/launch_prover_local.sh
      #+END_SRC

      Make sure you run the corresponding script and verify it does load the reasoner correctly and without errors. The reasoner should run through the script and allow you to issue OCaml toplevel commands. It should react (and exit) if you provide the following command:
      #+BEGIN_SRC ocaml
        exit(0);;
      #+END_SRC

** Run
   :PROPERTIES:
   :EXPORT_FILE_NAME: run
   :EXPORT_HUGO_WEIGHT: 230
   :END:
*** Configuration

    Running the server requires a ~.properties~ configuration file with 3 elements:
    1. ~server~: The host name (default: ~localhost~).
    2. ~port~: The port to bind to for listening (default: ~7000~).
    3. ~launchProverCommand~: The location of the [[#script][script to run the reasoner]].

    The contents of the ~docker.properties~ file, which is used in the Docker image, is shown as an example below:
    #+begin_example
    server=localhost
    port=7000
    launchProverCommand=/server/scripts/launch_prover_docker.sh
    #+end_example

*** Launch

    To summarize, running the server requires the following:
    1. An installation of the Java server.
    2. A working installation of the reasoner.
    3. A configuration file.
    
    With everything in place, the server can be run from its installation with the following command:
    #+BEGIN_SRC sh
      ./bin/WorkflowFM_Server /path/to/configuration/file.properties
    #+END_SRC
