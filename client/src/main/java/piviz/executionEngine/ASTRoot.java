/* Generated By:JJTree: Do not edit this line. ASTRoot.java */

package piviz.executionEngine;

import java.io.FileWriter;
import java.io.IOException;

/**
 * Root Node of the tree representing the pi-system.
 * 
 * @author Anja
 * 
 */
public class ASTRoot extends SimpleNode {
	public ASTRoot(int id) {
		super(id);
	}

	public ASTRoot(PiParser p, int id) {
		super(p, id);
	}

	/**
	 * The first node needs to open the file the output is written in.
	 */
	public int dumpDot(String prefix, int nodeCount, FileWriter fw) {
		// System.out.println(toString(prefix)+ nodeCount + ";");
		int newCount = nodeCount;

		try {
			// start the dot file
			// System.out.println("digraph G {");
			fw.write("digraph G {\n");

			// print the children
			if (children != null) {
				for (int i = 0; i < children.length; ++i) {
					SimpleNode n = (SimpleNode) children[i];
					if (n != null) {
						newCount = n.dumpDot(toString() + "_" + nodeCount
								+ " -> ", newCount + 1, fw);
					}
				}
			}

			// end the dot file
			// System.out.println("}");
			fw.write("}");
			fw.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return newCount;
	}

	public ASTAgentDefinition getAgentDefinition(String agentName) {
		if (children != null) {
			for (int i = 0; i < children.length; ++i) {
				SimpleNode n = (SimpleNode) children[i];
				if (n != null) {
					if (n.toString() == "AgentDefinition") {
						if (((ASTAgentDefinition) n).getAgentName().equals(agentName))
							return (ASTAgentDefinition) n;
					}
				}
			}
		}
		return null;
	}
}
