/* Generated By:JJTree&JavaCC: Do not edit this line. PiParser.java */
package piviz.executionEngine;
import java.io.InputStream;
import java.io.Reader;
import java.util.HashSet;
import java.util.Hashtable;

import piviz.exceptions.PiParserError;

/**
* PiParser uses an input stream and constructs an Abstract syntax tree from the definitions in
* this stream.
* @author Anja
*/
public class PiParser/*@bgen(jjtree)*/implements PiParserTreeConstants, PiParserConstants {/*@bgen(jjtree)*/
  protected JJTPiParserState jjtree = new JJTPiParserState();
        /**
	* For checking if an agent is defined twice.
	*/
        private static HashSet agentNames;
        /**
	* Store information about the defined pools. The user does not have to define any pools.
	* They are just used for additional information during visualization.
	* pools looks like the following: <key: agentName><value:poolName>
	*/
        private static Hashtable pools;
        /**
	* For checking if a pool is defined twice.
	*/
        private static HashSet poolNames;

        private static String currentAgent;

        /**
	* Parse input stream and construct an Abstract Syntax Tree.
	* @return Returns the root node of the constructed tree.
	*/
        public static SimpleNode parseFile(InputStream stream) throws PiParserError, Exception {
                PiParser t = new PiParser(stream);
                if (agentNames == null) agentNames = new HashSet();
                else agentNames.clear();
                if (pools == null) pools = new Hashtable();
                else pools.clear();
                if (poolNames == null) poolNames = new HashSet();
                else poolNames.clear();
                currentAgent = "";
                SimpleNode n = null;
                //try {
              n = t.Root();
            /*} catch (Exception e) {
	      System.out.println("Oops.");
	      System.out.println(e.getMessage());
	      e.printStackTrace();
    	}*/
        return n;
        }

        /**
	* Parse additional agent. Return root node with the new agent as children.
	*/
        public static SimpleNode parseAdditionalAgents(Reader stream, HashSet _agentNames, Hashtable _pools, HashSet _poolNames) throws PiParserError, Exception {
                PiParser t = new PiParser(stream);
                agentNames = _agentNames;
                pools = _pools;
                poolNames = _poolNames;
                currentAgent = "";
                SimpleNode n = null;
                //try {
              n = t.Root();
            /*} catch (Exception e) {
	      System.out.println("Oops.");
	      System.out.println(e.getMessage());
	      e.printStackTrace();
    	}*/
        return n;
        }

        public static Hashtable getPoolTable(){
                return pools;
        }

        public static HashSet getPoolNames(){
                return poolNames;
        }

        public static HashSet getAgentNames(){
                return agentNames;
        }

/**
* Create the root node.
*/
  final public SimpleNode Root() throws ParseException {
                     /*@bgen(jjtree) Root */
  ASTRoot jjtn000 = new ASTRoot(JJTROOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expression();
      jj_consume_token(0);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

/**
* No node is created for this rule but it takes care that at least one agent is defined.
*/
  final public void Expression() throws ParseException {
    label_1:
    while (true) {
      if (jj_2_1(3)) {
        ;
      } else {
        break label_1;
      }
      PoolDefinition();
    }
    label_2:
    while (true) {
      AgentDefinition();
      if (jj_2_2(3)) {
        ;
      } else {
        break label_2;
      }
    }
  }

/**
* Get the definitions of the pools and store them in the pool table.
*
*/
  final public void PoolDefinition() throws ParseException {
                             Token agentName, poolName;
    jj_consume_token(POOL_TOK);
    poolName = jj_consume_token(AGENT_ID);
                // Check if the pool is defined twice
                if (poolNames.contains(poolName.image))
                        {if (true) throw new PiParserError("Encountered duplicate pool definition: "+ poolName.image);}
    jj_consume_token(14);
    agentName = jj_consume_token(AGENT_ID);
                        // Check if the agent already belongs to another pool
                        if ( pools.containsKey(agentName.image))
                                {if (true) throw new PiParserError("Agent "+ agentName.image + " already belongs to another pool.");}
                        pools.put(agentName.image, poolName.image);
    label_3:
    while (true) {
      if (jj_2_3(3)) {
        ;
      } else {
        break label_3;
      }
      jj_consume_token(15);
      agentName = jj_consume_token(AGENT_ID);
                                // Check if the agent already belongs to another pool
                                if ( pools.containsKey(agentName.image))
                                        {if (true) throw new PiParserError("Agent "+ agentName.image + " already belongs to another pool.");}
                                pools.put(agentName.image, poolName.image);
    }
    jj_consume_token(16);
  }

/**
* Create an agentDefinition node and set its attributes, which are the name of the agent (agentName),
* the parameters and if this agent is going to be executed right away  (setExecuteAgent).
*
* The definition of an agent has the following syntax:
* "exec"? "agent" <AgentName> "(" parameters ") = " <ProcessDefintion> 
*/
  final public void AgentDefinition() throws ParseException {
                          /*@bgen(jjtree) AgentDefinition */
                          ASTAgentDefinition jjtn000 = new ASTAgentDefinition(JJTAGENTDEFINITION);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);Token name;
    try {
      if (jj_2_4(3)) {
        jj_consume_token(EXEC);
                        jjtn000.setExecuteAgent(true);
      } else {
        ;
      }
      jj_consume_token(AGENT_TOK);
      name = jj_consume_token(AGENT_ID);
                currentAgent = name.image;
                // check if this agent already exists
                if (agentNames.contains(name.image)){
                        {if (true) throw new PiParserError("Encountered duplicate definition of agent: " + name.image);}
                }
                else agentNames.add(name.image);

                jjtn000.setAgentName(name.image);
      if (jj_2_6(3)) {
        jj_consume_token(17);
      } else if (jj_2_7(3)) {
        jj_consume_token(18);
        jj_consume_token(19);
      } else if (jj_2_8(3)) {
        jj_consume_token(18);
        name = jj_consume_token(CHAN_ID);
                                jjtn000.addParameter(name.image);
        label_4:
        while (true) {
          if (jj_2_5(3)) {
            ;
          } else {
            break label_4;
          }
          jj_consume_token(15);
          name = jj_consume_token(CHAN_ID);
                                        jjtn000.addParameter(name.image);
        }
        jj_consume_token(19);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(20);
      Composition();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/**
* A composition node is created if there is more than one process definition specified seperated by
* the "|"-operator.
*/
  final public void Composition() throws ParseException {
          ASTComposition jjtn001 = new ASTComposition(JJTCOMPOSITION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
    try {
      P();
      label_5:
      while (true) {
        if (jj_2_9(3)) {
          ;
        } else {
          break label_5;
        }
        jj_consume_token(21);
        P();
      }
    } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
    } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
    }
  }

/**
* No "P" node is created, it makes sure that the process definition can consist of the constructs
* restriction, replication, defined agents and summation.
*/
  final public void P() throws ParseException {
    if (jj_2_12(3)) {
      Restriction();
      if (jj_2_10(3)) {
        Composition();
      } else {
        ;
      }
    } else if (jj_2_13(3)) {
      Replication();
      if (jj_2_11(3)) {
        Composition();
      } else {
        ;
      }
    } else if (jj_2_14(3)) {
      DefinedAgent();
    } else if (jj_2_15(3)) {
      Summation();
    } else if (jj_2_16(3)) {
      jj_consume_token(18);
      Composition();
      jj_consume_token(19);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**
* Create a summation node if more than one choices are available seperated by the "+" operator.
*/
  final public void Summation() throws ParseException {
          ASTSummation jjtn001 = new ASTSummation(JJTSUMMATION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
    try {
      M();
      label_6:
      while (true) {
        if (jj_2_17(3)) {
          ;
        } else {
          break label_6;
        }
        jj_consume_token(22);
        M();
      }
    } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
    } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
    }
  }

/**
* No "M" node is created. This rule makes sure that choices are either inactive or start with one
* of the constructs defined by Pi().
*/
  final public void M() throws ParseException {
    if (jj_2_18(3)) {
      jj_consume_token(INACTION);
    } else if (jj_2_19(3)) {
      Pi();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**
* Create a restriction node and fill its parameter vector.
*/
  final public void Restriction() throws ParseException {
                      /*@bgen(jjtree) Restriction */
                      ASTRestriction jjtn000 = new ASTRestriction(JJTRESTRICTION);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);Token name;
    try {
      if (jj_2_22(3)) {
        jj_consume_token(23);
        name = jj_consume_token(CHAN_ID);
                                                jjtn000.addResName(name.image);
        label_7:
        while (true) {
          if (jj_2_20(3)) {
            ;
          } else {
            break label_7;
          }
          jj_consume_token(15);
          name = jj_consume_token(CHAN_ID);
                                                jjtn000.addResName(name.image);
        }
      } else if (jj_2_23(3)) {
        jj_consume_token(18);
        jj_consume_token(23);
        name = jj_consume_token(CHAN_ID);
                                                jjtn000.addResName(name.image);
        label_8:
        while (true) {
          if (jj_2_21(3)) {
            ;
          } else {
            break label_8;
          }
          jj_consume_token(15);
          name = jj_consume_token(CHAN_ID);
                                                jjtn000.addResName(name.image);
        }
        jj_consume_token(19);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      P();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/**
* Create a replication node.
*/
  final public void Replication() throws ParseException {
                      /*@bgen(jjtree) Replication */
  ASTReplication jjtn000 = new ASTReplication(JJTREPLICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(24);
      P();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/**
* Create a defined agent node and set its attributes agentName and parameters.
* A defined agent and the agent that turns into this defined agent have to be defined in
* the same pool.
*/
  final public void DefinedAgent() throws ParseException {
                       /*@bgen(jjtree) DefinedAgent */
                       ASTDefinedAgent jjtn000 = new ASTDefinedAgent(JJTDEFINEDAGENT);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);Token name;
    try {
      name = jj_consume_token(AGENT_ID);
                if (pools.get(currentAgent) != null){
                        if (!pools.get(currentAgent).equals(pools.get(name.image)))
                                {if (true) throw new PiParserError("Agents "+currentAgent+" and "+name.image+" are not in the same pool.");}
                }
                else if (pools.get(name.image) != null)
                        {if (true) throw new PiParserError("Agents "+currentAgent+" and "+name.image+" are not in the same pool.");}

                jjtn000.setAgentName(name.image);
      if (jj_2_25(3)) {
        jj_consume_token(17);
      } else if (jj_2_26(3)) {
        jj_consume_token(18);
        jj_consume_token(19);
      } else if (jj_2_27(3)) {
        jj_consume_token(18);
        name = jj_consume_token(CHAN_ID);
                                        jjtn000.addParameter(name.image);
        label_9:
        while (true) {
          if (jj_2_24(3)) {
            ;
          } else {
            break label_9;
          }
          jj_consume_token(15);
          name = jj_consume_token(CHAN_ID);
                                                jjtn000.addParameter(name.image);
        }
        jj_consume_token(19);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/**
* No "Pi" node is created. This rule makes sure that the pi-constructs send, receive, tau and match
* can be used respectively.
*/
  final public void Pi() throws ParseException {
    if (jj_2_28(3)) {
      Send();
    } else if (jj_2_29(3)) {
      Receive();
    } else if (jj_2_30(3)) {
      Tau();
    } else if (jj_2_31(3)) {
      Match();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**
* Create a send node and set its attributes channelName and parameters.
*/
  final public void Send() throws ParseException {
               /*@bgen(jjtree) Send */
                ASTSend jjtn000 = new ASTSend(JJTSEND);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);Token channel;
    try {
      jj_consume_token(25);
      channel = jj_consume_token(CHAN_ID);
                jjtn000.setChannelName(channel.image);
      if (jj_2_34(3)) {
        jj_consume_token(26);
      } else {
        if (jj_2_33(3)) {
          jj_consume_token(27);
          channel = jj_consume_token(CHAN_ID);
                        jjtn000.addParameter(channel.image);
          label_10:
          while (true) {
            if (jj_2_32(3)) {
              ;
            } else {
              break label_10;
            }
            jj_consume_token(15);
            channel = jj_consume_token(CHAN_ID);
                        jjtn000.addParameter(channel.image);
          }
          jj_consume_token(28);
        } else {
          ;
        }
      }
      Forward();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/**
* Create a receive node and set its attributes channelName and parameters.
*/
  final public void Receive() throws ParseException {
                  /*@bgen(jjtree) Receive */
                  ASTReceive jjtn000 = new ASTReceive(JJTRECEIVE);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);Token channel;
    try {
      channel = jj_consume_token(CHAN_ID);
                jjtn000.setChannelName(channel.image);
      if (jj_2_37(3)) {
        jj_consume_token(17);
      } else {
        if (jj_2_36(3)) {
          jj_consume_token(18);
          channel = jj_consume_token(CHAN_ID);
                        jjtn000.addParameter(channel.image);
          label_11:
          while (true) {
            if (jj_2_35(3)) {
              ;
            } else {
              break label_11;
            }
            jj_consume_token(15);
            channel = jj_consume_token(CHAN_ID);
                        jjtn000.addParameter(channel.image);
          }
          jj_consume_token(19);
        } else {
          ;
        }
      }
      Forward();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/**
* Create a tau node.
*/
  final public void Tau() throws ParseException {
              /*@bgen(jjtree) Tau */
  ASTTau jjtn000 = new ASTTau(JJTTAU);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TAU);
      Forward();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/**
* Create a match node and set its attributes name1 and name2 which refer to the channel names going
* to be compared.
*/
  final public void Match() throws ParseException {
                /*@bgen(jjtree) Match */
                ASTMatch jjtn000 = new ASTMatch(JJTMATCH);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);Token name;
    try {
      jj_consume_token(29);
      name = jj_consume_token(CHAN_ID);
                                jjtn000.setName1(name.image);
      if (jj_2_38(3)) {
        jj_consume_token(20);
                       jjtn000.setKind(ASTMatch.EQUAL);
      } else if (jj_2_39(3)) {
        jj_consume_token(30);
                                                                jjtn000.setKind(ASTMatch.UNEQUAL);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      name = jj_consume_token(CHAN_ID);
                                        jjtn000.setName2(name.image);
      jj_consume_token(31);
      Pi();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/**
* No "Forward" node is created - workaround for left recursion.
*/
  final public void Forward() throws ParseException {
    jj_consume_token(32);
    if (jj_2_42(3)) {
      Restriction();
      if (jj_2_40(3)) {
        Composition();
      } else {
        ;
      }
    } else if (jj_2_43(3)) {
      Replication();
      if (jj_2_41(3)) {
        Composition();
      } else {
        ;
      }
    } else if (jj_2_44(3)) {
      DefinedAgent();
    } else if (jj_2_45(3)) {
      jj_consume_token(18);
      Composition();
      jj_consume_token(19);
    } else if (jj_2_46(3)) {
      M();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  final private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  final private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  final private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  final private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  final private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  final private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  final private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  final private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  final private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  final private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  final private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  final private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  final private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  final private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  final private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  final private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  final private boolean jj_3_38() {
    if (jj_scan_token(20)) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_scan_token(32)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_42()) {
    jj_scanpos = xsp;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3_44()) {
    jj_scanpos = xsp;
    if (jj_3_45()) {
    jj_scanpos = xsp;
    if (jj_3_46()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_scan_token(EXEC)) return true;
    return false;
  }

  final private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) jj_scanpos = xsp;
    if (jj_scan_token(AGENT_TOK)) return true;
    if (jj_scan_token(AGENT_ID)) return true;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_scan_token(15)) return true;
    if (jj_scan_token(CHAN_ID)) return true;
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_scan_token(15)) return true;
    if (jj_scan_token(CHAN_ID)) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_scan_token(29)) return true;
    if (jj_scan_token(CHAN_ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3_39()) return true;
    }
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_scan_token(24)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_scan_token(15)) return true;
    if (jj_scan_token(AGENT_ID)) return true;
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_scan_token(18)) return true;
    if (jj_scan_token(23)) return true;
    if (jj_scan_token(CHAN_ID)) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_scan_token(TAU)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_scan_token(23)) return true;
    if (jj_scan_token(CHAN_ID)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_20()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_35() {
    if (jj_scan_token(15)) return true;
    if (jj_scan_token(CHAN_ID)) return true;
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3_36() {
    if (jj_scan_token(18)) return true;
    if (jj_scan_token(CHAN_ID)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_35()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(19)) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_36()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) return true;
    }
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3_31() {
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_scan_token(22)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3_37() {
    if (jj_scan_token(17)) return true;
    return false;
  }

  final private boolean jj_3R_23() {
    if (jj_scan_token(CHAN_ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) return true;
    }
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_scan_token(INACTION)) return true;
    return false;
  }

  final private boolean jj_3R_12() {
    if (jj_scan_token(POOL_TOK)) return true;
    if (jj_scan_token(AGENT_ID)) return true;
    if (jj_scan_token(14)) return true;
    return false;
  }

  final private boolean jj_3_30() {
    if (jj_3R_24()) return true;
    return false;
  }

  final private boolean jj_3_32() {
    if (jj_scan_token(15)) return true;
    if (jj_scan_token(CHAN_ID)) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3_33() {
    if (jj_scan_token(27)) return true;
    if (jj_scan_token(CHAN_ID)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_32()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(28)) return true;
    return false;
  }

  final private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_33()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_12()) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_3R_20()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_17()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_34() {
    if (jj_scan_token(26)) return true;
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_scan_token(15)) return true;
    if (jj_scan_token(CHAN_ID)) return true;
    return false;
  }

  final private boolean jj_3_29() {
    if (jj_3R_23()) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_scan_token(18)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(19)) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_scan_token(25)) return true;
    if (jj_scan_token(CHAN_ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_scan_token(21)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3_39() {
    if (jj_scan_token(30)) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_3R_17()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3_31()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3_28() {
    if (jj_3R_22()) return true;
    return false;
  }

  final private boolean jj_3_41() {
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_scan_token(15)) return true;
    if (jj_scan_token(CHAN_ID)) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    if (jj_3R_14()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_9()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_27() {
    if (jj_scan_token(18)) return true;
    if (jj_scan_token(CHAN_ID)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_24()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(19)) return true;
    return false;
  }

  final private boolean jj_3_40() {
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_scan_token(18)) return true;
    if (jj_scan_token(19)) return true;
    return false;
  }

  final private boolean jj_3_26() {
    if (jj_scan_token(18)) return true;
    if (jj_scan_token(19)) return true;
    return false;
  }

  final private boolean jj_3_46() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3_45() {
    if (jj_scan_token(18)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(19)) return true;
    return false;
  }

  final private boolean jj_3_44() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3_43() {
    if (jj_3R_17()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_41()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_scan_token(18)) return true;
    if (jj_scan_token(CHAN_ID)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_5()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(19)) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_scan_token(17)) return true;
    return false;
  }

  final private boolean jj_3_25() {
    if (jj_scan_token(17)) return true;
    return false;
  }

  final private boolean jj_3_42() {
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_scan_token(AGENT_ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) return true;
    }
    }
    return false;
  }

  public PiParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[46];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public PiParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public PiParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PiParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public PiParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PiParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public PiParser(PiParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(PiParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[33];
    for (int i = 0; i < 33; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 33; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 46; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
