<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>WorkflowFM Composer</title><link>http://docs.workflowfm.com/workflowfm-composer/</link><description>Recent content on WorkflowFM Composer</description><generator>Hugo -- gohugo.io</generator><atom:link href="http://docs.workflowfm.com/workflowfm-composer/index.xml" rel="self" type="application/rss+xml"/><item><title>Install</title><link>http://docs.workflowfm.com/workflowfm-composer/client/getting-started/install/</link><pubDate>Fri, 07 Jan 2022 12:07:04 +0000</pubDate><guid>http://docs.workflowfm.com/workflowfm-composer/client/getting-started/install/</guid><description>To install, you can either grab the pre-built zip file or build the client yourself.
Release Install simply by grabbing the zipped distribution from the latest release and unzip to your chosen location.
Manual build The client can be built manually using Gradle, which ships with the repository.
You can use either:
Pre-installed Gradle: gradle Linux: ./gradlew Windows: gradlew.bat Building requires JDK 11 or above. The client can be compiled and packaged with a single command:</description></item><item><title>Run</title><link>http://docs.workflowfm.com/workflowfm-composer/client/getting-started/run/</link><pubDate>Fri, 07 Jan 2022 12:07:05 +0000</pubDate><guid>http://docs.workflowfm.com/workflowfm-composer/client/getting-started/run/</guid><description>Start the Client using (Linux/Mac):
1./bin/WorkflowFM_Composer or similarly in Windows:
.\bin\WorkflowFM_Composer.bat Once loaded, enter the address and port of the server in the dialog provided:
If the client is able to connect to the server, you will see the full client interface:</description></item><item><title>Quick Start</title><link>http://docs.workflowfm.com/workflowfm-composer/client/use/quick/</link><pubDate>Fri, 07 Jan 2022 12:07:06 +0000</pubDate><guid>http://docs.workflowfm.com/workflowfm-composer/client/use/quick/</guid><description>A quick overview of some of the features is described in the following tasks:
Create Click on the Create Process icon. Double click on the process box labelled P1 to rename the process. Double click on one of the edges (initially labelled X) to rename the corresponding resource. Double click on one of the small, resource circles to add a new branch. Right-click on one of the small, resource circles to add a branch of different type (from parallel to optional and vice-versa) or to delete a branch.</description></item><item><title>Create &amp; Edit</title><link>http://docs.workflowfm.com/workflowfm-composer/client/use/edit/</link><pubDate>Fri, 07 Jan 2022 12:07:07 +0000</pubDate><guid>http://docs.workflowfm.com/workflowfm-composer/client/use/edit/</guid><description>Clicking on the Create Process icon at any time opens a new window for creating a new atomic process. Right-clicking on an atomic process in the Processes list on the left and then clicking the Edit Process option opens the same window to allow edits. The available functionality is described below.
Actions can be undone/redone at any time using the undo/redo arrows at the top, or Ctrl-Z and Ctrl-Y respectively.</description></item><item><title>Compose</title><link>http://docs.workflowfm.com/workflowfm-composer/client/use/compose/</link><pubDate>Fri, 07 Jan 2022 12:07:07 +0000</pubDate><guid>http://docs.workflowfm.com/workflowfm-composer/client/use/compose/</guid><description>Composition involves the combination of 2 processes (binary compositions) in a single composite process.
This requires an active Workspace. A new workspace can be created using the Create Workspace icon. Processes can be added to the workspace by double-clicking them in the Processes list on the left or by right-clicking them and selecting the Add Graph option. Once added, processes can be composed together in 3 ways:</description></item><item><title>Store &amp; Verify</title><link>http://docs.workflowfm.com/workflowfm-composer/client/use/verify/</link><pubDate>Fri, 07 Jan 2022 12:07:08 +0000</pubDate><guid>http://docs.workflowfm.com/workflowfm-composer/client/use/verify/</guid><description>Store Storing an intermediate composition allows the creation of a new, composite process that can be reused in the same way as atomic processes.
The expectation here is that the user composes processes together using composition actions and generating intermediate compositions. Once they are happy with a particular composition and they want to keep it for further use as a new process, they can store it.
This can be accomplished by right clicking on an intermediate composition of a workspace in the Compositions list on the left.</description></item><item><title>Deploy</title><link>http://docs.workflowfm.com/workflowfm-composer/client/use/deploy/</link><pubDate>Fri, 07 Jan 2022 12:07:08 +0000</pubDate><guid>http://docs.workflowfm.com/workflowfm-composer/client/use/deploy/</guid><description>The reasoner can automatically generate executable Scala code for process compositions, including code templates for the involved resource types and atomic processes.
The code relies on the use of the WorkflowFM PEW execution engine.
This can be accomplished by right-clicking on a composite process and selecting the Deploy in Scala option. This will open a new window with the appropriate dialog for deploying code. Using the Ski example, the window is shown below:</description></item><item><title>Other</title><link>http://docs.workflowfm.com/workflowfm-composer/client/use/other/</link><pubDate>Fri, 07 Jan 2022 12:07:09 +0000</pubDate><guid>http://docs.workflowfm.com/workflowfm-composer/client/use/other/</guid><description>Some other available functionality is described here.
Show Graph Once a composite process or an intermediate composition is created, its graph can be viewed on a separate window.
This can be accomplished by right-clicking the composition and selecting the Show Graph option. The full graph is also shown when hovering above the blue process box of a (collapsed) composite process. This can be particularly useful for composite processes which appear as a single atomic process in subsequent compositions.</description></item><item><title>Examples</title><link>http://docs.workflowfm.com/workflowfm-composer/client/reference/examples/</link><pubDate>Fri, 07 Jan 2022 12:07:10 +0000</pubDate><guid>http://docs.workflowfm.com/workflowfm-composer/client/reference/examples/</guid><description>A list of examples is available in the default installation of the client. You can inspect them by loading the corresponding file, verifying all processes and compositions and viewing their graphs.
The following examples are included:
SimpleCopyAndSequence.json: Simple example demonstrating the copy node and 2 separate methods of serial sequential composition. Inspection of the graph and underlying Ï€-calculus structure shows the difference between composing right-to-left (simpler structure) and left-to-right (introduces axiom buffers).</description></item><item><title>Graph elements</title><link>http://docs.workflowfm.com/workflowfm-composer/client/reference/graph/</link><pubDate>Fri, 07 Jan 2022 12:07:11 +0000</pubDate><guid>http://docs.workflowfm.com/workflowfm-composer/client/reference/graph/</guid><description>The following is a complete list of the visual elements, including nodes (vertices) and edges, that can be encountered in a process graph.
Vertices Name Visual Description Resource An input or output resource. Atomic Process An atomic process. Composite Process A composite process. Copy node A process with a single input and multiple parallel outputs of the same type is assumed to be a copy process that makes multiple copies of its input.</description></item><item><title>Configuration</title><link>http://docs.workflowfm.com/workflowfm-composer/client/reference/configuration/</link><pubDate>Fri, 07 Jan 2022 12:07:12 +0000</pubDate><guid>http://docs.workflowfm.com/workflowfm-composer/client/reference/configuration/</guid><description>Configuration values are stored in a .workflowfm directory at the user's home directory, defaulting in the composer.properties file.
It is not necessary to explicitly set any of these configuration parameters, but it is possible to tweak the behaviour of the client in some ways if desired.
You can manually set parameters in the configuration file following the standard .properties file format, variable = value. You can also create a custom property file to be used instead of the default file.</description></item><item><title>Quick Setup</title><link>http://docs.workflowfm.com/workflowfm-composer/server/docker/image/</link><pubDate>Fri, 07 Jan 2022 12:04:56 +0000</pubDate><guid>http://docs.workflowfm.com/workflowfm-composer/server/docker/image/</guid><description>The easiest setup of the server is using the latest available Docker image.
Pull the image using:
1docker pull ghcr.io/workflowfm/composer-server:latest Then run a container using:
1docker run -p 7000:7000 --name workflowfm-server --detach ghcr.io/workflowfm/composer-server:latest The name workflowfm-server is optional and can be changed to whatever you want your server container to be named. The port can also be bound to a different system port, e.g. using -p 9000:7000 to bind it to port 9000.</description></item><item><title>Build Image</title><link>http://docs.workflowfm.com/workflowfm-composer/server/docker/build/</link><pubDate>Wed, 05 Jan 2022 13:47:50 +0000</pubDate><guid>http://docs.workflowfm.com/workflowfm-composer/server/docker/build/</guid><description>You can build the Docker image yourself from source.
First, clone the repository:
1git clone https://github.com/workflowfm/workflowfm-composer.git Make sure to recursively populate submodules:
1cd workflowfm-composer/ 2git submodule update --init --recursive --depth 1 Then build the image with the provided Dockerfile:
1docker build -t composer-server . Then run a container using:
1docker run -p 7000:7000 --name workflowfm-server --detach composer-server The name workflowfm-server is optional and can be changed to whatever you want your server container to be named.</description></item><item><title>Server</title><link>http://docs.workflowfm.com/workflowfm-composer/server/manual/server/</link><pubDate>Wed, 05 Jan 2022 13:47:51 +0000</pubDate><guid>http://docs.workflowfm.com/workflowfm-composer/server/manual/server/</guid><description>The server can be built using Gradle, which ships with the repository.
You can use either:
Pre-installed Gradle: gradle Linux: ./gradlew Windows: gradlew.bat Building requires JDK 11 or above. The server can be compiled and packaged with a single command:
1gradle :server:distZip This will create the file server/build/distributions/WorkflowFM_Server-{VERSION}.zip.
Unzip it to your favourite location to obtained a server installation.</description></item><item><title>Reasoner</title><link>http://docs.workflowfm.com/workflowfm-composer/server/manual/reasoner/</link><pubDate>Wed, 05 Jan 2022 13:47:52 +0000</pubDate><guid>http://docs.workflowfm.com/workflowfm-composer/server/manual/reasoner/</guid><description>Installation The WorkflowFM Reasoner can be installed following the instructions in its documentation.
The involved hol-light repository can already be found as a submodule under server/hol-light.
Using checkpointing, if possible, can help build a server that runs instantly.
Launch script Once the reasoner is installed and working, we need to build a script that runs the reasoner and pipes the input/output to the server.
The scripts/ directory contains bash scripts that can help achieve this.</description></item><item><title>Run</title><link>http://docs.workflowfm.com/workflowfm-composer/server/manual/run/</link><pubDate>Wed, 05 Jan 2022 13:47:53 +0000</pubDate><guid>http://docs.workflowfm.com/workflowfm-composer/server/manual/run/</guid><description>Configuration Running the server requires a .properties configuration file with 3 elements:
server: The host name (default: localhost). port: The port to bind to for listening (default: 7000). launchProverCommand: The location of the script to run the reasoner. The contents of the docker.properties file, which is used in the Docker image, is shown as an example below:
1server=localhost 2port=7000 3launchProverCommand=/server/scripts/launch_prover_docker.sh Launch To summarize, running the server requires the following:</description></item><item><title>Search</title><link>http://docs.workflowfm.com/workflowfm-composer/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://docs.workflowfm.com/workflowfm-composer/search/</guid><description/></item></channel></rss>